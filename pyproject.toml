# PEP-518 https://peps.python.org/pep-0518/
[build-system]
# Minimum requirements for the build system to execute.
requires = ["setuptools>=65.5.1"]  # PEP 518 specifications
build-backend = "setuptools.build_meta"

[project]
name = "kedro"
authors = [
    {name = "Kedro"}
]
description = "Kedro helps you build production-ready data and analytics pipelines"
requires-python = ">=3.9"
dependencies = [
    "attrs>=21.3",
    "build>=0.7.0",
    "cachetools>=4.1",
    "click>=4.0",
    "cookiecutter>=2.1.1,<3.0",
    "dynaconf>=3.1.2,<4.0",
    "fsspec>=2021.4",
    "gitpython>=3.0",
    "importlib-metadata>=3.6,<9.0",
    "importlib_resources>=1.3,<7.0",  # The `files()` API was introduced in `importlib_resources` 1.3 and Python 3.9.
    "kedro-telemetry>=0.5.0",
    "more_itertools>=8.14.0",
    "omegaconf>=2.1.1",
    "parse>=1.19.0",
    "pluggy>=1.0",
    "pre-commit-hooks",
    "PyYAML>=4.2,<7.0",
    "rich>=12.0,<14.0",
    "rope>=0.21,<2.0",  # subject to LGPLv3 license
    "toml>=0.10.0",
    "typing_extensions>=4.0",
]
keywords = [
    "pipelines",
    "machine learning",
    "data pipelines",
    "data science",
    "data engineering",
]
license = {text = "Apache Software License (Apache 2.0)"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dynamic = ["readme", "version"]

[project.optional-dependencies]
test = [
    "behave==1.2.6",
    "coverage[toml]",
    "detect-secrets~=1.5.0",
    "import-linter==2.2",
    "ipylab>=1.0.0",
    "ipython~=8.10",
    "jupyterlab_server>=2.11.1",
    "jupyterlab>=3,<5",
    "jupyter~=1.0",
    "kedro-datasets",
    "mypy~=1.0",
    "pandas~=2.0",
    "pluggy>=1.0",
    "pre-commit>=2.9.2, <5.0",  # The hook `mypy` requires pre-commit version 2.9.2.
    "pytest-cov>=3,<7",
    "pytest-mock>=1.7.1, <4.0",
    "pytest-xdist[psutil]~=2.2.1",
    "pytest>=7.2,<9.0",
    "s3fs>=2021.4, <2025.4",
    "requests_mock",
    # mypy related dependencies
    "pandas-stubs",
    "types-PyYAML",
    "types-cachetools",
    "types-requests",
    "types-toml",
]
docs = [
    "ipykernel>=5.3, <7.0",
    "Jinja2<3.2.0",
    "kedro-sphinx-theme==2024.10.3",
    "sphinx-notfound-page!=1.0.3",  # Required by kedro-sphinx-theme. 1.0.3 results in `AttributeError: 'tuple' object has no attribute 'default'`.
]
jupyter = [
    "ipylab>=1.0.0",
    "notebook>=7.0.0"  # requires the new share backend of notebook and labs"
]
benchmark = [
    "asv"
]
all = [ "kedro[test,docs,jupyter,benchmark]" ]

[project.urls]
Homepage = "https://kedro.org"
Source = "https://github.com/kedro-org/kedro"
Documentation = "https://docs.kedro.org"
Tracker = "https://github.com/kedro-org/kedro/issues"

[project.scripts]
kedro = "kedro.framework.cli:main"

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
include = ["kedro*"]

[tool.setuptools.package-data]
kedro = ["py.typed"]

[tool.setuptools.dynamic]
readme = {file = "README.md", content-type = "text/markdown"}
version = {attr = "kedro.__version__"}

[tool.ruff.format]
exclude = ["**/templates", "features/steps/test_starter"]
docstring-code-format = true

[tool.coverage.report]
fail_under = 100
show_missing = true
omit = [
    "kedro/templates/*",
    "kedro/extras/logging/color_logger.py",
    "kedro/extras/extensions/ipython.py",
    "kedro/framework/cli/hooks/specs.py",
    "kedro/framework/hooks/specs.py",
    "tests/*",
    "kedro/runner/parallel_runner.py",
    "*/site-packages/*",
]
exclude_also = ["raise NotImplementedError", "if TYPE_CHECKING:", "class CatalogProtocol"]

[tool.coverage.run]
concurrency = ["multiprocessing", "thread"]
parallel = true
sigterm = true

[tool.pytest.ini_options]
addopts="""
--cov-context test  \
--cov-config pyproject.toml \
--cov-report xml:coverage.xml \
--cov-report term-missing \
--cov kedro \
--cov tests \
--ignore tests/template/fake_repo \
--ignore features \
--ignore kedro/templates \
--no-cov-on-fail \
-ra \
-W ignore"""
testpaths = [
  "tests"
]

[tool.importlinter]
root_package = "kedro"

[[tool.importlinter.contracts]]
name = "CLI > Context > Library, Runner > Extras > IO & Pipeline"
type = "layers"
containers = "kedro"
layers = [
    "framework.cli",
    "framework.session",
    "framework.context",
    "framework.project",
    "runner",
    "io",
    "pipeline",
    "config"
]
ignore_imports = [
    "kedro.runner.task -> kedro.framework.project",
    "kedro.framework.hooks.specs -> kedro.framework.context",
    "kedro -> kedro.ipython"
]

[[tool.importlinter.contracts]]
name = "Pipeline and IO are independent"
type = "independence"
modules = [
    "kedro.pipeline",
    "kedro.io"
]
ignore_imports = [
    "kedro -> kedro.ipython"
]

[[tool.importlinter.contracts]]
name = "Config cannot import Runner et al"
type = "forbidden"
source_modules = [
    "kedro.config"
]
forbidden_modules = [
    "kedro.runner",
    "kedro.io",
    "kedro.pipeline",
]

[[tool.importlinter.contracts]]
name = "Runner et al cannot import Config"
type = "forbidden"
source_modules = [
    "kedro.runner",
    "kedro.io",
    "kedro.pipeline",
]
forbidden_modules = [
    "kedro.config"
]
ignore_imports = [
    "kedro.framework.context.context -> kedro.config",
    "kedro.framework.session.session -> kedro.config",
]

[tool.ruff]
line-length = 88
show-fixes = true
lint.select = [
    "F",    # Pyflakes
    "W",    # pycodestyle
    "E",    # pycodestyle
    "I",    # isort
    "UP",   # pyupgrade
    "PL",   # Pylint
    "T201", # Print Statement
    "S",    # flake8-bandit
    "TCH",  # flake8-type-checking
    "RUF",  # Ruff-specific rules
]
lint.ignore = ["E501"]

[tool.ruff.lint.isort]
known-first-party = ["kedro"]

[tool.ruff.lint.per-file-ignores]
"{tests,docs}/*" = ["PLR2004","PLR0913"]
"{tests,docs,tools,static,features,docs}/*" = ["T201", "S101", "S108"]  # Check print statement for kedro/ only

[tool.mypy]
ignore_missing_imports = true
disable_error_code = ['misc']
exclude = ['^kedro/templates/', '^docs/', '^features/steps/test_starter/']
